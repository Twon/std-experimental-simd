/*! \file simd
        The entry point for the std::experimental::simd namespace and containing classes.
 */
#ifndef STD_EXPERIMENTAL_SIMD_H
#define STD_EXPERIMENTAL_SIMD_H

#pragma once

#include <experimental/simd_platform.hpp>

/*! \namespace std::experimental

 */
namespace std::experimental {

    /*! \namespace datapar_abi

     */
    namespace datapar_abi {

    }

    /*! \namespace simd_abi

     */
    namespace simd_abi {

        /*! \namespace details
                Internal implementation defined details of the simd_abi namespace.
         */
        namespace details {


            struct scalar_register {
                using is_valid_abi_tag = std::integral_constant<bool, true>;
            };

            template<size_t size_in_bytes>
            struct vector_register {
                inline static constexpr size_t size = size_in_bytes;
                using is_valid_abi_tag = std::integral_constant<bool, true>;
            };

            template<size_t size_in_bytes>
            struct vector_mask_register {
                inline static constexpr size_t size = size_in_bytes;
                using is_valid_abi_tag = std::integral_constant<bool, true>;
            };

            using sse_register = vector_register<16>;
            using avx_register = vector_register<32>;
            using avx512_register = vector_register<64>;
        }

        /*! With the scalar ABI tag, data-parallel types are equivalent to a single element type. However, the full
            simd and simd_mask interface is supported and thus eases development of generic code.
         */
        using scalar = details::scalar_register;

        /*! An alias for the ABI tag with the most efficient data parallel execution for the element type T that
            ensures ABI compatibility on the target architecture.
            \note
                Consider a target architecture supporting the implementation-defined ABI tags simd128 and simd256, where
                the simd256 type requires an optional ISA extension on said target architecture. Also, the target
                architecture does not support long double with either ABI tag. The implementation therefore defines:
                    - compatible<T> as an alias for simd128 for all arithmetic T, except long double,
                    - and compatible<long double> as an alias for scalar.
         */
        template < class T >
        using compatible = scalar;

        template < class T >
        inline constexpr int max_fixed_size = 16;

        template <int N> struct fixed_size {};

        /*! An alias for the ABI tag with the most efficient data parallel execution for the element type T that
            ensures ABI compatibility on the target architecture.
        */
        template < class T >
        using native = scalar;
    }

    /*! \defgroup simd.traits
        @{

        \struct is_abi_tag
            If T is an ABI tag in the simd_abi namespace, provides the member constant value equal true. For any other
            type, value is false.
        \tparam T
            A type to check.
     */
    template <class, class = std::void_t<>>
    struct is_abi_tag : std::integral_constant<bool, false>
    {
    };

    template< class T >
    struct is_abi_tag<T, std::void_t<typename T::is_valid_abi_tag>> : std::integral_constant<bool, true> { };

    /*! A helper variable template to ease using is_abi_tag in a template expression.
        \tparam T
     */
    template <typename T>
    inline constexpr bool is_abi_tag_v = is_abi_tag<T>::value;


    template <class T> struct is_simd;
    template <class T> struct is_mask;
//    template <class T, size_t N> struct abi_for_size { using type = implementation-defined; };
//    template <class T, class Abi = simd_abi::compatible<T>> struct simd_size;
//    template <class T, class U = typename T::value_type> struct memory_alignment;
    //! @}

    // [simd.mask.class]
    template <class _Tp, class _Abi>
    class simd_mask {
    };


    /*! \defgroup simd.whereexpr
        @{

        \class const_where_expression
            The class template const_where_expression abstracts the notion of selected elements of a given const object
            of arithmetic or data-parallel type.  Selected elements signifies the elements data[i] for all
            i ∈ {j ∈ ℕ0 | j < M::size() ⋀ mask[j]}.
        \tparam M The mask type.
        \tparam V The value type M applies on.
     */
    template <class M, class T>
    class const_where_expression {
        const M& simd_mask; // exposition only
        T& data;  // exposition only
    public:
        const_where_expression(const const_where_expression&) = delete;
        const_where_expression& operator=(const const_where_expression&) = delete;
        remove_const_t<T> operator-() const &&;

        //template <class U, class Flags> [[nodiscard]] V copy_from(const U* mem, Flags f) const &&;
        template <class U, class Flags> void copy_to(U* mem, Flags f) const &&;
    };

    /*! \addtogroup simd.whereexpr
        \class where_expression
            The class template where_expression abstracts the notion of selected elements of a given non-const object of
            arithmetic or data-parallel type. Selected elements signifies the elements data[i] for all
            i ∈ {j ∈ ℕ0 | j < M::size() ⋀ mask[j]}.
        \tparam M The mask type.
        \tparam V The value type M applies on.
     */
    template <class M, class T>
    class where_expression : public const_where_expression<M, T> {
    public:
        where_expression(const where_expression&) = delete;
        where_expression& operator=(const where_expression&) = delete;
        template <class U> void operator=(U&& x);
        template <class U> void operator+=(U&& x);
        template <class U> void operator-=(U&& x);
        template <class U> void operator*=(U&& x);
        template <class U> void operator/=(U&& x);
        template <class U> void operator%=(U&& x);
        template <class U> void operator&=(U&& x);
        template <class U> void operator|=(U&& x);
        template <class U> void operator^=(U&& x);
        template <class U> void operator<<=(U&& x);
        template <class U> void operator>>=(U&& x);
        void operator++();
        void operator++(int);
        void operator--();
        void operator--(int);
        template <class U, class Flags> void copy_from(const U* mem, Flags);
    };
    //! @}



}

#endif //STD_EXPERIMENTAL_SIMD_H
